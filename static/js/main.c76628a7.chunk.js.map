{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["lyrics","score","begin","time","postLyrics","lyricsString","document","getElementById","value","replace","split","console","log","length","n","getElementsByClassName","style","display","tab","i","innerHTML","createTemplate","beginGame","timer","setInterval","clearInterval","disabled","backgroundColor","color","checkLyric","lyric","toLowerCase","transition","App","className","id","rows","cols","onClick","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c76628a7.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nlet lyrics;\nlet score = 0;\nlet begin = 0;\nlet passColour = \"rgb(105, 207, 255)\";\nlet time = 320;\n\nfunction postLyrics() {\n  let lyricsString = document.getElementById(\"lyrics\").value;\n  // replace new line with a space\n  lyrics = lyricsString.replace(/\\n/g, \" \").split(\" \");\n\n  document.getElementById(\"lyrics\").value = \"\";\n  console.log(\"num lyrics: \" + lyrics.length);\n  createTemplate(lyrics.length);\n}\n\nfunction createTemplate(n) {\n  if (n < 5000) {\n    document.getElementsByClassName(\"songSpace\")[0].style.display = \"none\";\n    document.getElementById(\"beginBtn\").style.display = \"block\";\n    //document.getElementsByClassName(\"playerSpace\")[0].style.display = \"block\";\n\n    let tab = \"<table><tbody><tr>\";\n    //let col = Math.ceil(n / 6);\n    let row = 10;\n    for (let i = 0; i < n; i++) {\n      if (i % row === 0) {\n        tab += \"</tr><tr>\";\n      }\n      tab += \"<td class='lyricPos' id='lyric_\" + i + \"'>__________</td>\";\n      //tab += \"<td class='lyricPos' id='lyric_\" + i + \"'>\" + lyrics[i] + \"</td>\"; // debugging\n    }\n    tab += \"</tr></tbody></table><br><br>\";\n    document.getElementById(\"lyricTable\").innerHTML += tab;\n    document.getElementById(\"scoreID\").innerHTML = \"Score: 0/\" + lyrics.length;\n    //begin = 1;\n    document.getElementById(\"timerID\").innerHTML = time + \" seconds remain\";\n  } else {\n    console.log(\"thats a lot of lyrics: \" + n);\n  }  \n}\n\nfunction beginGame() {\n  document.getElementsByClassName(\"playerSpace\")[0].style.display = \"block\";\n  document.getElementById(\"beginBtn\").style.display = \"none\";\n  begin = 1;\n}\n\nvar timer = setInterval(function() {\n  if (begin === 1) {    \n    //console.log(\"time is \" + time);\n    document.getElementById(\"timerID\").innerHTML = time + \" seconds remain\";\n    time -= 1;\n    if (time < 0) {\n      // finished\n      clearInterval(timer);\n\n      document.getElementById(\"lyricCheck\").disabled = true;\n\n      for (let i = 0; i < lyrics.length; i++) {\n        if (document.getElementsByClassName(\"lyricPos\")[i].style.backgroundColor !== passColour) {\n          document.getElementsByClassName(\"lyricPos\")[i].innerHTML = lyrics[i];\n          document.getElementsByClassName(\"lyricPos\")[i].style.color = \"rgba(255, 0, 0, 1)\";\n        }\n      }\n    }\n  }  \n}, 1000);\n\nfunction checkLyric() {\n  let lyric = document.getElementById(\"lyricCheck\").value.replace(/\\W/g, '');\n  //console.log(lyric);\n  for (let i = 0; i < lyrics.length; i++) {\n    //let testLyric = lyrics[i].replace( /[^a-zA-Z0-9]/ , \"\").toLowerCase();\n    let testLyric = lyrics[i].replace(/\\W/g, '').toLowerCase();    \n    if (testLyric === lyric) {\n      if (document.getElementsByClassName(\"lyricPos\")[i].style.backgroundColor !== passColour) {\n        //console.log(\"matches\");\n        score += 1;\n        document.getElementById(\"scoreID\").innerHTML = \"Score: \" + score + \"/\" + lyrics.length;\n        document.getElementById(\"lyricCheck\").value = \"\";\n        document.getElementsByClassName(\"lyricPos\")[i].innerHTML = lyrics[i];\n        document.getElementsByClassName(\"lyricPos\")[i].style.color = \"rgba(0, 0, 0, 1)\";\n        document.getElementsByClassName(\"lyricPos\")[i].style.transition = \"all 1s\";\n        document.getElementsByClassName(\"lyricPos\")[i].style.backgroundColor = passColour;\n\n        if (score === lyrics.length) {\n          document.getElementById(\"timerID\").innerHTML = \"complete, time is \" + time;\n          begin = 0;\n          clearInterval(timer);\n        }\n      }\n    }\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"songSpace\">\n        <p>Enter lyrics here...</p>\n        <textarea id=\"lyrics\" rows=\"4\" cols=\"50\"></textarea><br />\n        <button onClick={postLyrics}>Submit</button>        \n      </div>\n      <br /><br />\n      <button id=\"beginBtn\" onClick={beginGame} style={{display: \"none\"}}>Begin</button>\n      <div className=\"playerSpace\" style={{display: \"none\"}}>\n        <div className=\"lyricSpace\">\n          <input id=\"lyricCheck\" onChange={checkLyric}></input>\n          <p id=\"scoreID\"></p>\n          <p id=\"timerID\"></p>\n        </div>\n        <br /><br /><br /><br /><br /><br /><br /><br />\n        <div id=\"lyricTable\"></div>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}